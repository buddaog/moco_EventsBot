import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import os

# üîê –í–∞—à —Ç–æ–∫–µ–Ω
TELEGRAM_TOKEN = "7736390099:AAHIDSncyfAPCx85XWB-4mxSw6dZCWhZdX0"

# üìç –ö–∞—Ä—Ç—ã –∏–∑ Mo.co
maps = [
    "Shrine Village", "Overgrown Ruins", "Infested Forest", "Cave Of Spirits", "Castle Walls",
    "Summoning Grounds", "Sewers", "Corrupted Village", "Corrupted Ruins", "Corrupted Forest",
    "Corrupted Cave", "Corrupted Castle", "Corrupted Shrine"
]

# üõ†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# üì¶ –•–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /events —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–≤–µ–Ω—Ç—ã –ø–æ –∫–∞—Ä—Ç–∞–º.")

# üì¶ –•–µ–Ω–¥–ª–µ—Ä /events
@dp.message(Command("events"))
async def cmd_events(message: Message):
    keyboard = [
        [InlineKeyboardButton(text=map_name, callback_data=f"map:{map_name}")]
        for map_name in maps
    ]
    await message.answer("üìç –í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—É:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

# üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
@dp.callback_query(F.data.startswith("map:"))
async def on_map_selected(callback: CallbackQuery):
    map_name = callback.data.split("map:")[1]
    # ‚ö†Ô∏è –ó–¥–µ—Å—å –∑–∞–≥–ª—É—à–∫–∞ ‚Äî —Å—é–¥–∞ –≤—Å—Ç–∞–≤–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∂–µ
    await callback.message.edit_text(f"üó∫ –ö–∞—Ä—Ç–∞: <b>{map_name}</b>\n\nüîç –ò–≤–µ–Ω—Ç—ã: (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)", parse_mode="HTML")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
