import json
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import CommandStart, Command
from aiogram.dispatcher import filters

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open("config.json", "r") as f:
    config = json.load(f)

TELEGRAM_TOKEN = config["telegram_token"]
ALLOWED_USERS = config.get("allowed_users", [])

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –∏ –∏–≤–µ–Ω—Ç–æ–≤
MAPS = [
    "Downtown", "Farm", "Ranch", "Fairgrounds", "Harbor",
    "Lab", "Bazaar", "Trainyard", "Boardwalk", "Park",
    "Studio", "Suburb", "Complex"
]

EVENT_TYPES = ["Overcharged", "Boss", "Escort", "Dojo", "Rift"]

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(CommandStart())
async def start_handler(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /events, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∏–≤–µ–Ω—Ç—ã.")

# –ö–æ–º–∞–Ω–¥–∞ /events
@dp.message_handler(Command("events"))
async def events_handler(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    keyboard = InlineKeyboardMarkup(row_width=2)
    for name in MAPS:
        keyboard.insert(InlineKeyboardButton(text=name, callback_data=f"map_{name}"))

    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—É:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
@dp.callback_query_handler(filters.Text(startswith="map_"))
async def map_callback_handler(query: types.CallbackQuery):
    map_name = query.data.replace("map_", "")

    keyboard = InlineKeyboardMarkup(row_width=2)
    for ev_type in EVENT_TYPES:
        keyboard.insert(InlineKeyboardButton(text=ev_type, callback_data=f"filter_{map_name}_{ev_type}"))

    await query.message.edit_text(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞: {map_name}\n–í—ã–±–µ—Ä–∏ —Ñ–∏–ª—å—Ç—Ä—ã:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞
@dp.callback_query_handler(filters.Text(startswith="filter_"))
async def filter_callback_handler(query: types.CallbackQuery):
    _, map_name, ev_type = query.data.split("_", 2)

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–±—ã—Ç–∏—è—Ö
    await query.message.edit_text(f"üîç –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ {map_name} —Ç–∏–ø–∞ {ev_type} –±—É–¥—É—Ç –∑–¥–µ—Å—å... (–∑–∞–≥–ª—É—à–∫–∞)")

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
